#!/usr/bin/env ruby
# << passburg >>
# created 2011 by wolfger@spearwolf.de
require "passburg"
require "passburg/version"
require "optparse"
require "ostruct"
require "tempfile"

def show_version
  puts "passburg: v#{Passburg::VERSION}"
  exit
end

# parse cmd line options {{{
passburg_cmd = :find

OptionParser.new do |opts|
  opts.banner = "Usage: passburg [options] .."

  opts.separator ""
  opts.separator "Common options:"

  opts.on("--show", "Show password/s") do
    passburg_cmd = :show
  end

  opts.on("-a", "--add", "Add new password section/s") do
    passburg_cmd = :add
  end

  opts.on("--export", "Export raw password data") do
    passburg_cmd = :export
  end

  opts.on("--edit", "Edit raw password database") do
    passburg_cmd = :edit
  end

  opts.on_tail("-v", "--version", "Show version") { show_version }
end.parse!

show_version if passburg_cmd == :find and ARGV.empty?
# }}}

def readlines(filepath)
  File.readlines(filepath).map(&:chomp)
end

# open passburg safe {{{
SAFE_FILE_PATH = File.join(Passburg::HOME_DIR_PATH, "password.safe")

Passburg.mkdir!
@pass = Passburg.ask_for_password
pw_safe = if File.exists?(SAFE_FILE_PATH)
            begin
              Passburg::Safe.new Passburg.decrypt(readlines(SAFE_FILE_PATH), @pass)
            rescue
              exit
            end
          else
            Passburg::Safe.new([]).tap do |safe|
              File.open(SAFE_FILE_PATH, "w") do |out|
                out.puts Passburg.encrypt(safe, @pass)
              end
            end
          end
# }}}

def blank?(str)
  str.chomp.strip.size == 0
end

def show_result(result)
  puts "---\n#{result}---" unless blank? result
end

case passburg_cmd
when :find
  show_result pw_safe.send(:find, ARGV)

when :show
  show_result pw_safe.send(:show, ARGV)

when :export
  puts pw_safe.to_s(true)

when :add
  file = Tempfile.new('passburg')
  file.close
  begin
    system("vim", file.path)
    new_section = readlines(file.path)
    pw_safe.parse(new_section)
    File.open(SAFE_FILE_PATH, "w") do |out|
      out.puts Passburg.encrypt(pw_safe.to_s(true), @pass)
      out.close
    end
  ensure
    file.unlink
  end

else
  $stderr.puts "TODO: passburg_cmd=#{passburg_cmd}"
end

